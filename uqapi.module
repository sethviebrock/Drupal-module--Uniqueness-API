<?php

/**
 * @file
 * An API and schema to store, retrieve and calculate uniqueness for Drupal content.
 *
 * The API stores a key that represents the content that you would like to
 * remain unique across the site. The key is limited to 255 characters to provide
 * for efficient lookup and comparison. The value is also stored It provides two core functions:
 * uqapi_is_unique() and uqapi_are_unique(). Details can be found below.
 *
 * An example migth be blog node titles -- you do not want any duplicate
 * blog node titles to be submitted. Therefore, you would call uqapi_is_unique()
 * on $node->title in hook_nodeapi() when $node->type == 'blog'. 
 *
 */

/**
 * Check content for uniqueness
 *
 * @param string $content
 * 		A string or integer to check for uniqueness
 *
 * @param string $content_id (optional)
 * 		An arbitrary string (up to 255 characters) to identify this piece of
 * 		content (i.e. 'message', 'blog_node_title', etc) It is up to you to
 * 		provide a string to identify your content. If you do not provide a
 * 		string, the content will be tested for uniqueness systemwide.
 *
 * @param array $params (optional)
 * 		An array of parameters corresponding to the method used to determine uniqueness.
 *
 *   	$params['strip_spaces'] - Set to FALSE if you do not want spaces stripped
 *   		(i.e. if spaces are significant to uniqueness)
 *
 * @return boolean 
 *   A boolean value, whether the given value is unique or not.
 *
 * @see uqapi_are_unique
 */
function uqapi_is_unique($content, $content_id = NULL, &$params = array()) {
  
  //Set default to strip spaces
  if(! $params['strip_spaces']){
	$params['strip_spaces'] = TRUE;
  }
  
  if(strlen($content) < 1){
	watchdog('Uniqueness API', 'Content compared for uniqueness must be at least one character long');
	return NULL;
  }
  
  $result = _uqapi_check_and_store_key($content, $params);
}

/**
 * Private function for checking and storing uniqueness
 *
 * @param string $content
 *   A string to check for uniqueness
 *
 * @param array $params
 *   An array of parameters corresponding to the method used to determine uniqueness
 *
 * @return boolean $boolean 
 *   A boolean value, whether the given value is unique or not.
 */
function _uqapi_check_and_store_key($content, $content_id = NULL, &$params = array()) {
  
  $key = _uqapi_create_key($content, $params);
  
  if( _uqapi_look_up_key($key) ){
	//If there are more than one key matches, we have to go in and check the $content
	//to see if there is an exact match (based on any $params)
	return FALSE;//For now
  }
  else {
	if(isset($content_id)){
	  db_query("INSERT INTO {uqapi_keyval} (unique_key, value, content_id) VALUES ('%s', '%s', '%s')", $key, $content, $content_id);
	}
	else {
	  db_query("INSERT INTO {uqapi_keyval} (unique_key, value, content_id) VALUES ('%s', '%s')", $key, $content);
	}
	return TRUE;
  }
}

/**
 * Private function for creating content keys
 *
 * @param string $content
 *   A string for which a key is created
 *
 * @param array $params
 *   An array of parameters corresponding to the method used to determine uniqueness
 *
 * @return
 *   A key representing a given content string
 */
function _uqapi_create_key($content, $params = array()) {
  if(isset($params['strip_spaces']) && $params['strip_spaces'] == FALSE){
	  //Set the unique_key to the first 255 characters of the string, WITH spaces, lowercase
      return strtolower( substr($content, 0, 255) );
  }
  else {
	//Set the unique_key to the first 255 characters of the string, WITHOUT spaces, lowercase
	  $content = preg_replace('/\s+/', '', $content);
	
    return strtolower( substr($content, 0, 255) );
  }
}

/**
 * Private function for looking up unique keys
 *
 * @param string $key
 *
 * @return boolean $boolean
 *   A boolean value, indicating uniqueness
 */
function _uqapi_look_up_key($key) {
  
  $result = db_query("SELECT unique_id FROM {uqapi_keyval} WHERE unique_key = '%s'", $key);
  
  $matches = array();
  while ($content = db_fetch_object($result)) {
	array_push($matches, TRUE);
  }
  
  return $matches;
}

/**
 * Example implementation, using hook_nodeapi
 *
 */
/*
function uqapi_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'validate':
      if ($node->type == 'blog' && !uqapi_is_unique($node->title)) {
        form_set_error('title', t('Please create a blog title that is unique.'));
      }
      break;
  }
}
*/