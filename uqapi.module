<?php

/**
 * @file
 * Provides an API and schema to store, retrieve and calculate uniqueness for Drupal content.
 */

/**
 * Check value for uniqueness
 *
 * @param string $value
 * 		A string or integer to check for uniqueness
 *
 * @param string $value_id (optional)
 * 		An arbitrary string (up to 255 characters) to identify this piece of
 * 		content (i.e. 'message', 'blog_node_title', etc) It is up to you to
 * 		provide a string to identify your content. If you do not provide a
 * 		string, the content will be tested for uniqueness systemwide.
 *
 * @return boolean 
 *   A boolean value, whether the given value is unique or not.
 *
 * @see uqapi_are_unique
 */
function uqapi_is_unique($value, $value_id = NULL) {
  
  //Strip spaces from content and make lowercase, by default. (We can add params later to specify this behavior, if necessary)
  $value = strtolower( preg_replace('/\s+/', '', $value) );
  
  if(strlen($value) < 1){
	watchdog('Uniqueness API', 'Content compared for uniqueness must be at least one character long');
	return NULL;
  }
  
  return _uqapi_check_and_store_key($value, $value_id);
}

/**
 * Private function for checking and storing uniqueness
 *
 * @return boolean $boolean 
 *   A boolean value, whether the given value is unique or not.
 */
function _uqapi_check_and_store_key($value, $value_id) {
  
  $key = _uqapi_create_key($value, $value_id);
  $matches = _uqapi_look_up_key($key);
  
  //Delay more intensive lookup until edge case (more than one unique key):
  if($matches){
	//If there are more than one key matches, we have to go in and check the $value
	//to see if there is an exact match
	if( count($matches) > 1) {
	  
	  $results = db_query("SELECT unique_id FROM {uqapi_keyval} WHERE value = '$value' AND unique_id IN (" . db_placeholders($matches) . ")", $matches);
	  $result = db_fetch_object($result);
	  
	  //Do we have an exact match for this content / is this content not unique?
	  if($result) {
		return FALSE;//This content is not unique
	  }
	  else {
		return TRUE;//This content IS unique
	  }
	}
	else {
	  return FALSE;//This content is not unique
	}
  }
  else {
	if($value_id){
	  db_query("INSERT INTO {uqapi_keyval} (unique_key, value, value_id) VALUES ('%s', '%s', '%s')", $key, $value, $value_id);
	}
	else {
	  db_query("INSERT INTO {uqapi_keyval} (unique_key, value) VALUES ('%s', '%s')", $key, $value);
	}
	return TRUE;
  }
}

/**
 * Private function for creating content keys
 *
 * @return
 *   A key representing a given content string
 */
function _uqapi_create_key($value, $value_id) {
	//Append the value_id to the beginning of the $value string.
	//Then, create a unique key from the first 255 characters of the concatenated
	//string, lowercase:
	$value_id .= "::";
    return substr($value_id . $value, 0, 255);
}

/**
 * Private function for looking up unique keys
 *
 * @return array $matches
 *   An array of the unique_id entries for all matches
 */
function _uqapi_look_up_key($key) {
  
  $results = db_query("SELECT unique_id FROM {uqapi_keyval} WHERE unique_key = '%s'", $key);
  
  $matches = array();
  while ($result = db_fetch_object($results)) {
	array_push($matches, $result->unique_id);
  }
  
  return $matches;
}