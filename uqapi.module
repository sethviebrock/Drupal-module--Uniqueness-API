<?php

/**
 * @file
 * An API and schema to store, retrieve and calculate uniqueness for Drupal content.
 * 
 */

// Content type definitions
define('UNIQUE_TYPE_NODE', 'node');
define('UNIQUE_TYPE_NODE', 'user');
define('UNIQUE_TYPE_MESSAGE', 'message');
define('UNIQUE_TYPE_ANY', 'any');

// Field definitions
define('UNIQUE_FIELD_TITLE', 'title');
define('UNIQUE_FIELD_AUTHOR', 'name');
define('UNIQUE_FIELD_LANGUAGE', 'language');
define('UNIQUE_FIELD_TAXONOMY', 'taxonomy:');

/**
 * Check content for uniqueness
 *
 * @param string $content
 *   A string or integer to check for uniqueness
 *
 * @param string $content_type_identifier (OPTIONAL)
 * 		An arbitrary string to identify this piece of content (i.e. 'message', 'blog_node_title', etc)
 * 		It is up to you to provide a string to identify your content. If you do
 * 		not provide a string, the content will be tested for uniqueness systemwide.
 *
 * @param array $params (OPTIONAL)
 *   An array of parameters corresponding to the method used to determine uniqueness.
 *
 *   $params['strip_spaces'] - Set to FALSE if you do not want spaces stripped/disregarded
 *   	(i.e. if spaces are significant to uniqueness)
 *
 * @return boolean 
 *   A boolean value, whether the given value is unique or not.
 */
function uqapi_is_unique($content, $content_type_identifier, &$params) {
  
  //Set default to strip spaces
  if(! $params['strip_spaces']){
	$params['strip_spaces'] = TRUE;
  }
  
  if(strlen($content) < 1){
	 drupal_set_message(t('Content compared for uniqueness must be at least one character long.'), 'error');
	 return NULL;
  }
  
  return array_pop( _uqapi_check_keys($content, $params) );
}

/**
 * NOT YET IMPLEMENTED: Check an array of content for uniqueness in one database call
 *
 * @param array $content
 *   An array of content strings or integers to check for uniqueness
 *
 * @param string $content_type_identifier (OPTIONAL)
 * 		An arbitrary string to identify this piece of content (i.e. 'message', 'blog_node_title', etc)
 * 		It is up to you to provide a string to identify your content. If you do
 * 		not provide a string, the content will be tested for uniqueness systemwide.
 *
 * @param array $params
 *   An array of parameters corresponding to the method used to determine uniqueness.
 *   See function uqapi_is_unique() above for more details.
 *
 * @return array @booleans
 *   An array of boolean values, in order in which the array of content values was passed.
 */
function uqapi_are_unique($content, &$params) {
  //XXX: NOT YET IMPLEMENTED
  drupal_set_message(t('Function are_unique not yet implemented.'), 'error');
  exit;
}


/**
 * Private function for checking uniqueness
 *
 * @param string/array $content
 *   A string or array or strings or numbers to check for uniqueness
 *
 * @param array $params
 *   An array of parameters corresponding to the method used to determine uniqueness
 *
 * @return array 
 *   An array of boolean values.
 */
function _uqapi_check_keys($content, $content_type_identifier, &$params) {
  
  $keys = array();
  if( is_array($content) ){
	foreach ($content as $value){
	  array_push($keys, _uqapi_create_key ($value, $params));
	}
  }
  else {
	array_push($keys, _uqapi_create_key ($value, $params));
  }
  
  return _uqapi_look_up_keys($keys);
}

/**
 * Private function for creating content keys
 *
 * @param string $content
 *   A string for which a key is created
 *
 * @param array $params
 *   An array of parameters corresponding to the method used to determine uniqueness
 *
 * @return
 *   A key representing a given content string
 */
function _uqapi_create_key ($content, $params) {
  if( $params['strip_spaces'] ){
	  //Set the unique_key to the first 255 characters of the string, WITHOUT spaces
	  $content = preg_replace('/\s+/', '', $content);
      return substr($content, 255);
  }
  else {
	//Set the unique_key to the first 255 characters of the string, WITH spaces
    return substr($content, 255);
  }
}

/**
 * Private function for looking up unique keys
 *
 * @param array $keys
 *
 * @return array $booleans
 *   An array of boolean values
 */
function _uqapi_look_up_keys($keys) {
  
  $result = db_query( 'SELECT unique_id FROM {uqapi_keyval} WHERE unique_key IN (' . db_placeholders($keys, 'varchar') . ')' );
  
  $matches = array();
  while ($content = db_fetch_object($result)) {
	array_push($matches, TRUE);
  }
  
  return $matches;
}